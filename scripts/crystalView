#!/usr/bin/python

import sys
from typing import Any

import numpy as np

import cogue.crystal.symmetry as symmetry
import cogue.interface.mayavi2 as mayavi2
import cogue.interface.ui_utils as ui_utils
import cogue.interface.vasp_io as vasp_io
from cogue.crystal.utility import frac2val

parser = ui_utils.get_parser()
parser.add_argument(
    "-s",
    "--tolerance",
    dest="symprec",
    default=1e-5,
    type=float,
    help="Symmetry tolerance to search",
)
parser.add_argument(
    "--margin",
    dest="position_margin",
    default=None,
    help="Margin to plot atoms within crystal lattice",
)
args = parser.parse_args()
cell = vasp_io.read_poscar(args.filenames[0])

if args.is_bravais:
    cell = symmetry.get_crystallographic_cell(cell, tolerance=args.symprec)

margin: Any
if args.position_margin:
    margin = [frac2val(x) for x in args.position_margin.split()]
    if len(margin) == 1:
        margin = margin[0]
    elif len(margin) == 3:
        margin = np.array(margin)
    else:
        sys.stderr.write("--margin is incorrectly set.")
        sys.exit(1)
else:
    margin = 1e-5

if args.shift:
    ui_utils.set_shift(cell, args)

mayavi2.set_figure()
mayavi2.plot_cell(cell, margin=margin, with_axes=args.with_axes)

if args.t_mat or args.s_mat or args.is_r2h:
    transformed_cell = ui_utils.transform_cell(cell, args, is_shift=False)
    mayavi2.plot_cell(transformed_cell, margin=margin, color=(0, 0, 1))

if args.output_filename:
    mayavi2.savefig(args.output_filename, size=(800, 800))
else:
    mayavi2.show()
