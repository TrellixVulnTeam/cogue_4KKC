#!/usr/bin/env python

"""
Usage:

1. Remove unnecessary nodes from dot file
   phonon_relax_util --simplify AlN-PBE.dot | tee AlN-PBE-mod.dot

2. Extract path to node of task ID. Below is an example to convert to cif files.
   for i in {11,19,27};do
     pos_path=`phonon_relax_util AlN-PBE.dot $i`;
     spgsym=`symPoscar -s 0.1 $pos_path|sed 's/\///'|awk '{print $1}'`;
     poscar2cif $pos_path > ~/No$i-$spgsym.cif;
   done
"""

import sys
import re

def get_parser():
    from optparse import OptionParser
    parser = OptionParser()
    parser.set_defaults(path=True,
                        simplify=False,
                        energy=False)
    parser.add_option("--path",
                      dest="path",
                      action="store_true",
                      help="Show path to POSCAR of tid")
    parser.add_option("--simplify",
                      dest="simplify",
                      action="store_true",
                      help="Remove redundant information from dot file")
    parser.add_option("--energy",
                      dest="energy",
                      action="store_true",
                      help="Show energy/atom")
    return parser

###### simplify_dot ######
def get_tid(line):
    return int(line.split()[0].replace('n', ''))
    
def collect_tids_to_remove(lines):    
    tids_to_remove = []
    p = re.compile('(low_symmetry)|(submitted)|(running)')
    for line in lines:
        if p.search(line):
            tids_to_remove.append(get_tid(line))
    return tids_to_remove

def tid_in_line(tids_to_remove, line):
    for tid in tids_to_remove:
        if re.search('(^n%d\s+)|(-> n%d ;)' % (tid, tid), line):
            return True
    return False
    
def rewrite_dot(tids_to_remove, lines):
    simplified_lines = []
    for line in lines:
        if not tid_in_line(tids_to_remove, line):
            simplified_lines.append(line)

    return simplified_lines
    
def simplify_dot(lines):
    tids_to_remove = collect_tids_to_remove(lines)
    simplified_lines = rewrite_dot(tids_to_remove, lines)
    return simplified_lines

##### Connect relaxation path #####
def get_previous_tid(tid, lines):
    p = re.compile('-> n%d ;' % tid)
    for line in lines:
        if p.search(line):
            return get_tid(line)

def connect_path(tid, lines):
    tpath = [tid]
    while tid != 1:
        tid = get_previous_tid(tid, lines)
        tpath.append(tid)
    return tpath[::-1]

def search_line(tid, lines):
    for line in lines:
        if re.search('^n%d\s+\[' % tid, line):
            return line
    
def collect_labels(tpath, lines):
    labels = []
    for tid in tpath:
        line = search_line(tid, lines)
        m = re.search('label=\"(.+)\"', line)
        labels.append(m.group(1))
    return labels

def get_path_string(labels):
    path = ""
    for label in labels:
        path += label.split('\\n')[1].replace('\"', '')
        path += '/'
    return path

##### Collect energy #####
def get_enrergy(tid, lines):
    energy_str = collect_labels([tid], lines)[0].split('\\n')[3]
    energy = float(energy_str.split('/')[0])
    num_atom = int(energy_str.split('/')[1])
    return energy, num_atom


options, args = get_parser().parse_args()

if options.simplify:
    with open(args[0]) as f:
        lines = f.readlines()
        simplified_lines = simplify_dot(lines)
        text = ""
        for line in simplified_lines:
            text += line
        print(text)
elif options.energy:
    with open(args[0]) as f:
        lines = f.readlines()
        tid = int(args[1])
        energy, num_atom = get_enrergy(tid, lines)
        print("%f %d" % (energy / num_atom, num_atom))
elif options.path:
    with open(args[0]) as f:
        lines = f.readlines()
        tid = int(args[1])
        tpath = connect_path(tid, lines)
        labels = collect_labels(tpath, lines)
        path_string = get_path_string(labels)
        first_directory = path_string.split('/')[0]
        print(first_directory + "/" + path_string +
              "phonon_relax_element/phonon-1/POSCAR-unitcell")
    
